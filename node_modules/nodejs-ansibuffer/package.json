{
  "name": "nodejs-ansibuffer",
  "version": "0.0.5",
  "description": "Escape code aware (ANSI), chunked, input/output buffer",
  "main": "ansibuffer.js",
  "scripts": {
    "test": "node ./tests/test.js",
    "color": "node ./tests/color-test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jtsage/nodejs-ansibuffer"
  },
  "keywords": [
    "ANSI",
    "telnet",
    "net"
  ],
  "author": {
    "name": "J.T.Sage"
  },
  "license": "BSD",
  "readme": "ANSIBuffer\n==========\n\nPurpose\n-------\nnodejs-ANSIBuffer is a chunked, escape code aware input/output buffer for use in\nBBS-like telnet programs.  It's *primary* use it to provide a factory to mimic the\ndelay that we were all used to in the old BBS days.\n\nTOC\n---\n* [Usage](#usage)\n* [ASNIBuffer API](#api)\n* [ANSIChars](#chars)\n* [ANSICenter](#center)\n* [ANSIRightAlign](#right)\n* [Backtick Color](#backtick)\n* [Status](#status)\n* [Contributors](#contrib)\n* [Compatibility](#compat)\n* [Licence](#lic)\n\n<a name=\"usage\"></a>Usage\n-----\n\tvar net = require('net');\n\tvar ansi = require('nodejs-ansibuffer');\n\n\tvar server = net.createServer(function(c) { //'connection' listener\n\t\tconsole.log('server connected');\n  \n\t\tvar outputBuffer = new ansi.ANSIBuffer();\n\t\tvar delayedWriter = setInterval(\n\t\t\tfunction() { \n\t\t\t\tvar tmp = outputBuffer.bite();\n\t\t\t\tif ( tmp !== false ) { c.write(tmp); } \n\t\t\t}, 15);\n\t\t\t\n\t\t// Set character mode (client side - do not wait for CR-LF)\n\t\tc.write(String.fromCharCode(255) + String.fromCharCode(253) + String.fromCharCode(34),'ascii');\n\t\t// No local (client-side) echo\n\t\tc.write(String.fromCharCode(255) + String.fromCharCode(251) + String.fromCharCode(1),'ascii');\n  \n\t\toutputBuffer.queue(\" `9W`1elcome `9T`1o `9ANSIB`1uffer `2!!\");\n\t});\n\tserver.listen(8124, function() { //'listening' listener\n\t\tconsole.log('server bound');\n\t});\n\n\n    \n<a name=\"api\"></a>ANSIBuffer() API\n----------------\n\nTo create a new buffer, import the module, and create a new ANSIBuffer() object.\n\n\tvar ansi = require('nodejs-ansibuffer');\n\tvar buffer = new ansi.ANSIBuffer();\n\n#### ANSIBuffer.dump()\nReturns the full contents of the buffer, while emptying it.\n\n#### ANSIBuffer.bite()\nReturns an inteligent \"chunk\" of the buffer, of variable length.  Great pains are\ntaken to never \"break\" an ANSI control sequence - odd things happen when there is\na manufactured delay in these - well, sometimes anyway.\n\n#### ANSIBuffer.clear()\nEmpty the buffer, drop all the contents.\n\n#### ANSIBuffer.queue( text )\nQueue text for display.  This can be plain text, a string containing full escape\ncodes, or a string containing \"Legend of the Red Dragon\" [backtick](#backtick) codes.\n\n#### ANSIBuffer.center( text, [width] )\nQueue text for display (same as above) - But center it *on an 80 column screen*.\nIf not specified, defaults to a TERM width of 80.\n\n## <a name=\"chars\"></a>ANSIChars\nThis is an object that contains some well-used high-ASCII characters, reimagined\nin unicode.\n\n * A176 - &#x2591; - Light Shade\n * A177 - &#x2592; - Medium Shade\n * A178 - &#x2593; - Dark Shade\n * A219 - &#x2588; - Full Fill\n * A220 - &#x2584; - Bottom Half Box\n * A221 - &#x258c; - Left Half Box\n * A222 - &#x2590; - Right Half Box\n * A223 - &#x2580; - Top Half Box\n * A254 - &#x25aa; - Center Square\n * ESC - Escape Sequence Start \"{ESC}[\"\n \n## <a name=\"center\"></a>ANSICenter(text, [width]);\nThis is a function that allows you to center an ANSI string prior to queueing it. \n\n## <a name=\"right\"></a>ANSIRightAlign(text, column, [absolute]);\nThis is a function that allows you to right-align an ANSI string prior to \nqueueing it. Column can be either \"absolute\" (default), or based on the rest of\nthe line.\n\na/n: Absolute method moves to the named column, then backs up the length of the\nstring.  Relative method \"spaces\" over that many columns, then backs up the\nlength of the string.\n\n<a name=\"backtick\"></a>Backtick Color\n-----------------\nThese are the backtick color codes based on how the [Legend of the Red Dragon](http://en.wikipedia.org/wiki/Legend_of_the_Red_Dragon) did things.\n\n * <span style=\"background-color: black; color: rgb(170,0,0)\">`1 : Dark Red</span>\n * <span style=\"background-color: black; color: rgb(0,170,0)\">`2 : Dark Green</span>\n * <span style=\"background-color: black; color: rgb(170,85,0)\">`3 : Dark Yellow or Brown</span> (depends on terminal)\n * <span style=\"background-color: black; color: rgb(0,0,170)\">`4 : Dark Blue</span>\n * <span style=\"background-color: black; color: rgb(170,0,170)\">`5 : Dark Magenta or Purple</span> (depends on terminal)\n * <span style=\"background-color: black; color: rgb(0,170,170)\">`6 : Dark Cyan</span>\n * <span style=\"background-color: black; color: rgb(170,170,170)\">`7 : Light Grey (a.k.a. Dark White) (a.k.a. Normal)</span>\n * <span style=\"background-color: black; color: rgb(85,85,85)\">`8 : Dark Grey (a.k.a. Light Black)</span>\n * <span style=\"background-color: black; color: rgb(255,85,85)\">`9 : Bright Red</span>\n * <span style=\"background-color: black; color: rgb(85,255,85)\">`0 : Bright Green</span>\n * <span style=\"background-color: black; color: rgb(255,255,85)\">`! : Bright Yellow</span>\n * <span style=\"background-color: black; color: rgb(85,85,255)\">`@ : Bright Blue</span>\n * <span style=\"background-color: black; color: rgb(255,85,255)\">`# : Bright Magenta</span>\n * <span style=\"background-color: black; color: rgb(85,255,255)\">`$ : Bright Cyan</span>\n * <span style=\"background-color: black; color: rgb(255,255,255)\">`% : Bright White</span>\n * <span style=\"background-color: black; color: rgb(170,170,170)\">`. : Reset to TERM Default</span>\n\n### Mac Defaults:\nNote the lack of dark grey.  This is an issue with the default colors on the mac\nterminal. (taken from iTerm - terminal.app is even worse)\n\n![Mac Color Options](https://raw.github.com/jtsage/nodejs-ansibuffer/master/screens/color-test-mac.png)\n\n### Linux Defaults:\nTaken in terminator.  gnome-terminal is comparable\n\n![Linux Color Options](https://raw.github.com/jtsage/nodejs-ansibuffer/master/screens/color-test-linux.png)\n\n## <a name=\"status\"></a>Current status\nThis module is in a development stage. It's probably broken horribly in places - not sure.\n\n\n## <a name=\"contrib\"></a>Contributors\n* [J.T. Sage](https://github.com/jtsgae/)\n\n## <a name=\"compat\"></a>Compatibility\nThis module was only tested using node >= 0.8.8.  There is no reason it shouldn't\nrun under earlier versions though.\n\n## <a name=\"lic\"></a>Licence\nnode-ansibuffer is licensed under the MIT license. Or the BSD license.  Or no license if \nthat's more convient for you.\n\n",
  "_id": "nodejs-ansibuffer@0.0.5",
  "dist": {
    "shasum": "9affb77739f3d6c4fcba4b1ed75304796e480cbb"
  },
  "_from": "nodejs-ansibuffer@0.0.5"
}
